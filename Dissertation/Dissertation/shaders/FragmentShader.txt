#version 330 core

//Light Direction coming from the vertex shader
in vec3 lightDirV;
//Normal coming from the vertex shader
in vec3 vNormalV;
//halfvec coming from the vertex shader
in vec3 halfVec; 
//UV coming from the vertex shader
in vec2 UV; 

//snow on/off coming from the program 
uniform int snowOn;
//Different colours
uniform vec3 lightColour	= {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {0.8f,0.1f,0.1f};
uniform vec3 specularColour = {0.0f,0.0f,0.0f};
//Up vector for calculations
uniform vec3 up 			= {0.0f,1.0f,0.0f};
//Shininess value
uniform float shininess     = 0.5f;
//alpha value
uniform float alpha         = 1.0f;
//snow
uniform sampler2D textSampler0; 
//rock
uniform sampler2D textSampler1;
//Normal Rock
uniform sampler2D textSampler2;
//Normal Snow
uniform sampler2D textSampler3;

//out put the colour
out vec3 colour;

void main(){
//Give me the normalised textures
vec3 snowTextureNormal = normalize(texture2D(textSampler3, UV).rgb*2.0 - 1.0);
vec3 rockTextureNormal = normalize(texture2D(textSampler2, UV).rgb*2.0 - 1.0);
//do another comparison to check if the normal is facing up or not, and apply the correct texture
float dotresult = dot(vNormalV,up);
//Get two diffuse and speculars, one for snow, and one for rocks
//snow
vec3 diffuseT1 = texture(textSampler0, UV).rgb * lightColour * max( dot( snowTextureNormal, lightDirV ), 0);
vec3 specularT1= texture(textSampler0, UV).rgb * lightColour * dot( snowTextureNormal, lightDirV ) * max( dot( snowTextureNormal, halfVec ), 0) * shininess;
//rock
vec3 diffuseT2 = texture(textSampler1, UV).rgb * lightColour * max( dot( rockTextureNormal, lightDirV ), 0);
vec3 specularT2 = texture(textSampler1, UV ).rgb * lightColour * dot( rockTextureNormal, lightDirV ) * max( dot( rockTextureNormal, halfVec ), 0) * shininess;

//Also check if the user has snowon as true
if( dotresult > 0.0f && snowOn == 1){
//Mix it up a bit with snow :D
colour = mix(diffuseT2 + specularT2  ,diffuseT1 + specularT1 , dotresult);
}else{
//plain old brick
colour = diffuseT2 + specularT2 ;
}
//always add emissiveColour and ambientColour on either texture
colour += emissiveColour + ambientColour; 
}