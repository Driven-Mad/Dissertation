#version 430 core

//Vertex position coming from the program
layout(location = 0) in vec4 vPosition;
//Normal coming from the program
layout(location = 1) in vec3 vNormalIn;
//UVS coming from the program
layout(location = 2) in vec2 vUVIn; 
//Tangents coming from the program
layout(location = 3) in vec3 vTangentIn;
//BiTangents coming from the program
layout(location = 4) in vec3 vBiTangentIn;

//model matrix coming from the program
uniform mat4 modelMat;
//view matrix coming from the program
uniform mat4 viewMat;
//projection matrix coming from the program
uniform mat4 projMat;
//model 3X3 matrix coming from the program
uniform mat3 MV3x3;

uniform mat4 lightSpaceMatrix;

#define no_of_lights 5
//uniform block coming from program
layout (std140) uniform PointLights{
	vec4 PLposition[no_of_lights];
	vec4 PLambient[no_of_lights];
	vec4 PLlightColour[no_of_lights];
	float PLconstant[no_of_lights];
	float PLliniear[no_of_lights];
	float PLquadratic[no_of_lights];
	bool PLactive[no_of_lights];
	mat4 PLShadowProjection[6][no_of_lights];
};


layout (std140) uniform DirectionalLights{
vec4 DLdirection;
vec4 DLlightColour;
vec4 DLambient;
};
//outputs to the fragment shader, the Normal
out vec3 vNormalV;
//outputs to the fragment shader, for Point light the Light Direction
out vec3 lightDirPLV[no_of_lights];
out vec3 lightDirDLV;
//outputs to the fragment shader, the half Vector
out vec3 halfVecPL[no_of_lights];
out vec3 halfVecDL;
//outputs to the fragment shader, the UV
out vec2 UV;
//outputs the the fragment shader, the position
out vec4 vPositionV;

out vec4 FragPositionLightSpace;
out vec3 normalShadows;
vec3 calculateLightDirectionForPointLights(vec4 LightPosition, vec4 eyeSpaceVertPosition,mat3 TBN);
vec3 calculateLightDirectionForDirectionalLight(vec4 lightDirection, vec4 eyeSpaceVertPosition,mat3 TBN);

void main(){
//switch everything to tangent space.
vec3 vertexNormal_cameraspace = MV3x3 * normalize(vNormalIn); //Convert from Model space to camera Space
vec3 vertexTangent_cameraspace = MV3x3 * normalize(vTangentIn);
vec3 vertexBitangent_cameraspace = MV3x3 * normalize(vBiTangentIn);

mat3 TBN = transpose(mat3(vertexTangent_cameraspace,vertexBitangent_cameraspace,vertexNormal_cameraspace)); //Get the Tangent/Bitangent/Normal Matrix
vNormalV = vNormalIn;
normalShadows = transpose(inverse(mat3(modelMat))) * vNormalIn;
gl_Position = projMat * viewMat * modelMat * vPosition;
vec4 eyeSpaceVertPos = viewMat * modelMat * vPosition; 

//Create the different attributes for light calculations and colour to send to the fragment shader.

for(int i = 0; i<no_of_lights; i++)
lightDirPLV[i] = calculateLightDirectionForPointLights(PLposition[i],eyeSpaceVertPos, TBN);

lightDirDLV = calculateLightDirectionForDirectionalLight(DLdirection,eyeSpaceVertPos,TBN);


vec3 eyeDir = TBN * -eyeSpaceVertPos.xyz;

for(int i = 0; i<no_of_lights; i++)
halfVecPL[i] = normalize( normalize(eyeDir) + normalize(lightDirPLV[i]));

halfVecDL = normalize( normalize(eyeDir) + normalize(lightDirDLV));
FragPositionLightSpace = lightSpaceMatrix * vPosition;
vPositionV = vPosition;
UV = vUVIn ;
}


vec3 calculateLightDirectionForPointLights(vec4 LightPosition, vec4 eyeSpaceVertPosition, mat3 TBN){
	vec3 eyeSpacelightPosition = MV3x3 * normalize(LightPosition.xyz);
	vec3 dir = TBN * normalize( vec3(eyeSpacelightPosition) - vec3(eyeSpaceVertPosition) );
	return dir;
}

vec3 calculateLightDirectionForDirectionalLight(vec4 lightDirection, vec4 eyeSpaceVertPosition,mat3 TBN){
	vec3 eyeSpacelightDirection = MV3x3 * normalize(lightDirection.xyz);
	vec3 dir = TBN * normalize(-eyeSpacelightDirection);
	return normalize(dir);
}