#version 330 core

//Light Direction coming from the vertex shader
in vec3 lightDirV;
//Normal coming from the vertex shader
in vec3 vNormalV;
//halfvec coming from the vertex shader
in vec3 halfVec; 
//UV coming from the vertex shader
in vec2 UV; 

//Different colours
uniform vec3 lightColour	= {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {0.8f,0.1f,0.1f};
uniform vec3 specularColour = {0.0f,0.0f,0.0f};
//Up vector for calculations
uniform vec3 up 			= {0.0f,1.0f,0.0f};
//Shininess value
uniform float shininess     = 0.01f;
//alpha value
uniform float alpha         = 1.0f;

//rain
uniform sampler2D textSampler0; 

uniform sampler2D textSampler1;

//out put the colour
out vec4 colour;

void main(){
vec3 textureColour = texture2D(textSampler0,UV.xy).xyz;
float alpha;
if((textureColour.x  <= 0.1) && (textureColour.y <= 0.1) && (textureColour.z  <= 0.1)){
alpha = 0.;
}
else
{
alpha = 0.5;
}
vec3 TextureNormal = normalize(texture2D(textSampler1, UV).rgb*2.0 - 1.0);
vec3 diffuse = textureColour * max( dot( TextureNormal, lightDirV ), 0);
vec3 specular= textureColour * dot( TextureNormal, lightDirV ) * max( dot( TextureNormal, halfVec ), 0) * shininess;
vec3 temp = diffuse + specular + emissiveColour + ambientColour;

colour = vec4(temp.x,temp.y,temp.z,alpha);
}