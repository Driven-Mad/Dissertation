#version 430 core

//must be known before compile time.
#define no_of_lights 5

//uniform block coming from program
layout (std140) uniform PointLights{
	vec4 PLposition[no_of_lights];
	vec4 PLambient[no_of_lights];
	vec4 PLlightColour[no_of_lights];
	float PLconstant[no_of_lights];
	float PLliniear[no_of_lights];
	float PLquadratic[no_of_lights];
	bool PLactive[no_of_lights];
	mat4 PLShadowProjection[6][no_of_lights];
};

//struct PL{
//	vec4 PLposition;
//	vec4 PLambient;
//	vec4 PLlightColour;
//	float PLconstant;
//	float PLliniear;
//	float PLquadratic;
//};
//
//layout (std140) uniform PointLights{
//	PL pointLight[no_of_lights];
//};
layout (std140) uniform DirectionalLights{
vec4 DLdirection;
vec4 DLlightColour;
vec4 DLambient;
};
//Light Direction for point light coming from the vertex shader
in vec3 lightDirPLV[no_of_lights];

in vec3 lightDirDLV;
//Normal coming from the vertex shader
in vec3 vNormalV;
//halfvec coming from the vertex shader
in vec3 halfVecPL[no_of_lights]; 
in vec3 halfVecDL;
//UV coming from the vertex shader
in vec2 UV; 
//positiong coming from vertex shader
in vec4 vPositionV;

uniform vec3 cameraPosition;

in vec4 FragPositionLightSpace;

in vec3 normalShadows;
//Shininess value
uniform float shininess     = 0.5f;
//Texture
uniform sampler2D textSampler0; 
//Texture Normal
uniform sampler2D textSampler1;

uniform sampler2D shadowMap;

uniform samplerCube depthMap0;
uniform samplerCube depthMap1;
uniform samplerCube depthMap2;
uniform samplerCube depthMap3;
uniform samplerCube depthMap4;

float shadow;

float PLshadow;
layout (location = 0) out vec4 colour;
layout (location = 1) out vec4 brightness;

//uniform samplerCube depthMaps[no_of_lights] = {depthMap0,depthMap1,depthMap2,depthMap3,depthMap4};

vec3 calculatePointLights(vec3 lightDirection, vec4 lightColour, float cons, float lin, float quad, vec3 halfvec, vec4 ambient, vec4 lightPosition, float shad);
vec3 calculateDirectionalLight(vec4 lightColour,vec4 ambient ,vec3 lightDirection, vec3 halfvec, float shad);
float calculateShadows(vec4 lightSpaceFragPosition);
float calculatePointLightShadows(vec4 fragPosition, vec4 lightPosition, samplerCube depthMap);

void main(){
	vec3 result;
	//depthMaps[0] = depthMap0;
	//depthMaps[1] = depthMap1;
	//depthMaps[2] = depthMap2;
	//depthMaps[3] = depthMap3;
	//depthMaps[4] = depthMap4;
	
//if((PLShadowProjection[0][0])[2][0] > 0){
	shadow = calculateShadows(FragPositionLightSpace);
	//PLshadow[0] = calculatePointLightShadows(vPositionV, PLposition[0],depthMap0);
	//PLshadow[1] = calculatePointLightShadows(vPositionV, PLposition[1],depthMap1);
	//PLshadow[2] = calculatePointLightShadows(vPositionV, PLposition[2],depthMap2);
	//PLshadow[3] = calculatePointLightShadows(vPositionV, PLposition[3],depthMap3);
	//PLshadow[4] = calculatePointLightShadows(vPositionV, PLposition[4],depthMap4);
	//float s; //= shadow;
	//float activelights = 0;
	//for(int i = 0; i<no_of_lights; i++){
	//	if(PLactive[i] == true){
	//		s += PLshadow[i];
	//		activelights+=1;
	//	}
	//}
	//s+= shadow;
	//s /= (activelights +1 );
	
	//clamp(s,0.0f,1.0f);
//}
	
	
	if(PLactive[0] == true)
	{
		PLshadow = calculatePointLightShadows(vPositionV, PLposition[0],depthMap0);
		result += calculatePointLights(lightDirPLV[0], PLlightColour[0],PLconstant[0],PLliniear[0],PLquadratic[0],halfVecPL[0],PLambient[0], PLposition[0],PLshadow);
	}
	if(PLactive[1] == true)
	{
		PLshadow = calculatePointLightShadows(vPositionV, PLposition[1],depthMap1);
		result += calculatePointLights(lightDirPLV[1], PLlightColour[1],PLconstant[1],PLliniear[1],PLquadratic[1],halfVecPL[1],PLambient[1], PLposition[1],PLshadow);
	}
	if(PLactive[2] == true)
	{
		PLshadow = calculatePointLightShadows(vPositionV, PLposition[2],depthMap2);
		result += calculatePointLights(lightDirPLV[2], PLlightColour[2],PLconstant[2],PLliniear[2],PLquadratic[2],halfVecPL[2],PLambient[2], PLposition[2],PLshadow);
	}
	if(PLactive[3] == true)
	{
		PLshadow = calculatePointLightShadows(vPositionV, PLposition[3],depthMap3);
		result += calculatePointLights(lightDirPLV[3], PLlightColour[3],PLconstant[3],PLliniear[3],PLquadratic[3],halfVecPL[3],PLambient[3], PLposition[3],PLshadow);
	}
	if(PLactive[4] == true)
	{
		PLshadow = calculatePointLightShadows(vPositionV, PLposition[4],depthMap4);
		result += calculatePointLights(lightDirPLV[4], PLlightColour[4],PLconstant[4],PLliniear[4],PLquadratic[4],halfVecPL[4],PLambient[4], PLposition[4],PLshadow);
	}
	
	result += calculateDirectionalLight(DLlightColour,DLambient,lightDirDLV,halfVecDL, shadow);
		//for(int i = 0; i<no_of_lights; i++)
		//{
		//	if(PLactive[i] == true)
		//	{
			//PLshadow[i] = calculatePointLightShadows(vPositionV, PLposition[i],depthMap[i]);
			////int i = 4;
			//result += calculatePointLights(lightDirPLV[i], PLlightColour[i],PLconstant[i],PLliniear[i],PLquadratic[i],halfVecPL[i],PLambient[i], PLposition[i],PLshadow[i]);
		//	}
		//}
	//result  = result + (1.0 - shadow);
	
	//colour = texture(depthMap,UV);
	
	colour = vec4(result.x,result.y,result.z, 1.0f);
	//colour = vec4(PLShadowProjection[3][2][3].xyz, 1.0); //Check to see if the shadow projections are coming through. 
	float tempBreach = dot(colour.xyz, vec3(0.2126,0.7152,0.0722));
	if(tempBreach > 1.0){
		brightness = vec4(colour.xyz,1.0);
	}
}
vec3 calculateDirectionalLight(vec4 lightColour,vec4 ambient ,vec3 lightDirection, vec3 halfvec, float shad){
    lightDirection = normalize(lightDirection);
	vec3 temp;
	//Give me the normalised textures
	vec3 TextureNormal = normalize(texture2D(textSampler1, UV).rgb*2.0 - 1.0);
	vec3 diffuse = texture(textSampler0, UV).rgb * lightColour.xyz * max( dot( TextureNormal, lightDirection), 0);
	vec3 specular = texture(textSampler0, UV ).rgb * lightColour.xyz  * dot( TextureNormal, lightDirection ) * max( dot( TextureNormal, halfvec ), 0) * shininess;
	temp = (diffuse + specular) * (ambient.xyz + (1.0 - shad)) ;
	return temp;
}
vec3 calculatePointLights(vec3 lightDirection, vec4 lightColour, float cons, float lin, float quad, vec3 halfvec, vec4 ambient, vec4 lightPosition, float shad){
    lightDirection = normalize(lightDirection);
	vec3 temp;
	//Give me the normalised textures
	vec3 TextureNormal = normalize(texture2D(textSampler1, UV).rgb*2.0 - 1.0);
	vec3 diffuse 	= texture(textSampler0, UV).rgb * lightColour.xyz * max( dot( TextureNormal, lightDirection ), 0);
	vec3 specular 	= texture(textSampler0, UV ).rgb * lightColour.xyz  * dot( TextureNormal, lightDirection ) * max( dot( TextureNormal, halfvec ), 0) * shininess;
	float radius = 10.0f;
	vec3 L = lightPosition.xyz - vPositionV.xyz;
	float distance    = length(L);
	float attenuation = 1.0f / (cons + lin * distance + quad * (distance * distance));
	//attenuation *= 0.3;
	//if(attenuation > 1.0f){
	//	attenuation = 1.0f;
	//}
	
	//float d= max(distance - radius, 0.0f);
	//L /= distance;
	//
	//float denom = d/radius+ 1.0f;
	//
	//attenuation = clamp(1.0f - distance/radius,0.0f,1.0f);
	
	//temp = (diffuse + specular);
	temp = (diffuse + specular)* (ambient.xyz + (1.0 - shad));
	temp *= attenuation;
	//temp  *= (ambient.xyz + (1.0f - shad)) ;
	return temp;
}

float calculateShadows(vec4 lightSpaceFragPosition){
	vec3 projCoords = lightSpaceFragPosition.xyz / lightSpaceFragPosition.w;
	projCoords = projCoords * 0.5 + 0.5;
	//float bias = 0.005;
	vec3 normal = normalize(vNormalV);
	float bias = max(0.04 * (1.0 - dot(normal, DLdirection.xyz)), 0.004);  
	//float bias = max(0.01 * (1.0 - dot(normal, lightDirDLV.xyz)), 0.001);  
    // Transform to [0,1] range
    
    // Get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // Get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // Check whether current frag pos is in shadow
	float DLshadow = 0.0f;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			DLshadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	
	DLshadow /= 9.0;
	
    if(projCoords.z > 1.0){
        DLshadow = 0.0;
	}
	
    return DLshadow;
}
float sampleLevel = 1.0f;
vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(sampleLevel, sampleLevel, sampleLevel), 	vec3(sampleLevel, -sampleLevel, sampleLevel), 	vec3(-sampleLevel, -sampleLevel, sampleLevel), 	vec3(-sampleLevel, sampleLevel, sampleLevel), 
   vec3(sampleLevel, sampleLevel, -sampleLevel), 	vec3(sampleLevel, -sampleLevel, -sampleLevel), 	vec3(-sampleLevel, -sampleLevel, -sampleLevel), 	vec3(-sampleLevel, sampleLevel, -sampleLevel),
   vec3(sampleLevel, sampleLevel, 0.0f), 			vec3(sampleLevel, -sampleLevel, 0.0f), 			vec3(-sampleLevel, -sampleLevel, 0.0f), 	vec3(-sampleLevel, sampleLevel, 0.0f),
   vec3(sampleLevel, 0.0f, sampleLevel), 			vec3(-sampleLevel, 0.0f, sampleLevel), 			vec3(sampleLevel, 0.0f, -sampleLevel), 	vec3(-sampleLevel, 0.0f, -sampleLevel),
   vec3(0.0f, sampleLevel, sampleLevel), 			vec3(0.0f, -sampleLevel, sampleLevel), 			vec3(0.0f, -sampleLevel, -sampleLevel), 	vec3(0.0f, sampleLevel, -sampleLevel)
);

float calculatePointLightShadows(vec4 fragPosition, vec4 lightPosition, samplerCube depthMap)
{
	float PLTshadow = 0.0f;
	////Distance between frag position and the light
	vec3 fragToLight = fragPosition.xyz - lightPosition.xyz;
	normalize(fragToLight);
	//stop shadow acne
	float bias = 0.05f;
	//get length of vector.
	float currentDepth = length(fragToLight);
	normalize(currentDepth);
	//amount of samples for PCF (sorta)
	int samples = 20;
	//Distance between camera and fragment. 
    float viewDistance = length((cameraPosition) - fragPosition.xyz);
    float diskRadius = (1.0 + (viewDistance / 25.0f)) / 25.0f;
    //float diskRadius = (1.0 + (viewDistance / 24.9f)) / 25.0f;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(depthMap, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= 25.0f;   // Undo mapping [0;1]
		
        if(currentDepth - bias > closestDepth){
            PLTshadow += 1.0f;
		}
    }
    PLTshadow /= float(samples);
	 // Get vector between fragment position and light position
    //vec3 fragToLight = fragPosition.xyz - lightPosition.xyz;
    //// Use the light to fragment vector to sample from the depth map    
    //float closestDepth = texture(depthMap, fragToLight).r;
    //// It is currently in linear range between [0,1]. Re-transform back to original value
    //closestDepth *= 25.0f;
    //// Now get current linear depth as the length between the fragment and light position
    //float currentDepth = length(fragToLight);
    //// Now test for shadows
    //float bias = 0.15; 
    //PLTshadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;
	
	
	return PLTshadow;
}